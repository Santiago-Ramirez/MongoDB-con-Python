import pymongoimport self as selffrom pymongo import MongoClientclass mongoConexion:    def __init__(self):        conexion = MongoClient('localhost', 27017)        self.database = conexion.practica    def guardarClient(self, nombre, direccion, rfc, id_empresa):        nuevoCliente = {"direccion": direccion, "nombre": nombre, "rfc":rfc, "id_empresa":id_empresa}        try:            cliente = self.database.Clientes            cliente.insert_one(nuevoCliente)            return print("Se ha guardado correctamente el cliente con su empresa")        except Exception as error:            return print(error)    #guardadClient(self,database, "dani", "ortiz", "SDL4523121")    def guardarEmpresa(self, nombre, direccion, rfc):        nuevaEmpresa = {"direccion": direccion, "nombre": nombre, "rfc": rfc}        try:            empresa = self.database.Empresa            empresa.insert_one(nuevaEmpresa)            print("Se ha guardado correctamente la empresa en mongodb")            empresaCon = empresa.find_one({"nombre":nombre})            return empresaCon        except Exception as error:            return print(error)    #guardarEmpresa(self,database, "daniss", "osrtiz", "SDLAA4523121")    def mostrarProduco(self):        try:            ver = self.database.Producto            for Producto in ver.find():              print(Producto["nombre"], "--  precio: ", Producto['precio_base'] )        except Exception as error:            print(error)    def comprarProducto(self, nomCliente, listaProductos):        try:            compras = self.database.Compras            productos = self.database.Producto            # print(nom)            #print(nomCliente)            for producto in listaProductos:                unProducto = productos.find_one({"nombre":producto})                compras.insert_one({                    "nombreCliente": nomCliente,                    "producto":unProducto['_id']                })            print("Se han insertado correctamente las compras del cliente")        except Exception as error:            print (error)    def verificarCliente(self, nombreCliente):        try:            cliente = self.database.Clientes            nom = cliente.find_one({"nombre": nombreCliente})            if nom == None:                resp = [False, 'None']                return resp            else:                resp = [True, nom['nombre']]                return resp        except Exception as error:            print(error)    #comprarProducto(self,database,"Daniel","ffff")